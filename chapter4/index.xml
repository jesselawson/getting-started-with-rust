<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4: Compiler logic on Getting Started with Rust</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/</link><description>Recent content in 4: Compiler logic on Getting Started with Rust</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jesselawson.github.io/getting-started-with-rust/chapter4/index.xml" rel="self" type="application/rss+xml"/><item><title>How the Markdown compiler works</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/how-the-markdown-compiler-works/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter4/how-the-markdown-compiler-works/</guid><description>Now is a good time to start thinking about how we want to interact with our tiny markdown compiler. At its very core, a command-line markdown compiler should take in the name of a markdown file and then turn it into valid HTML file. Our tool is going to be very naive: it will accept only one argument (the name of the markdown file), it will expect that file to end in .</description></item><item><title>Parsing command-line arguments</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/parsing-command-line-args/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter4/parsing-command-line-args/</guid><description>The idea behind parsing command line arguments is fairly straight forward. Given an argument, perform some operation based on what that argument is. In the case of our Markdown compiler, we really only care about one argument&amp;ndash;and we hope that it&amp;rsquo;s the name of a Markdown file.
The way Rust parses arguments is to collect them all up and store them in an iterable object. This is also how most other languages do it, too; once the collection happens, you will generally want to do a for loop or some kind of switch statement that will parse the arguments first by the number of arguments (since the number of arguments can trigger certain operations, if we wanted) and then by the value of those arguments.</description></item><item><title>The `match` block</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/match/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter4/match/</guid><description>With the arguments collected into args, we now want to make sure that there are only two of them. Recall that our goal is to accept just one argument: the name of a Markdown file to parse. This means that we have two total elements in the args vector: the name of the program, and the name of the Markdown file.
We only handle invocation that includes two arguments, so the length of the args vector should be 2.</description></item><item><title>Passing arguments to functions</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/function-args/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter4/function-args/</guid><description>The last thing we need to do in the main() function is to pass the second argument into the function that parses the markdown file&amp;ndash;parse_markdown_file(). To do this, we need to change the declaration of parse_markdown_file() to accept a single argument: a string slice that is the filename to parse.
To add an argument to a function, you declare it the same way you would a regular variable, except this time you can omit the let.</description></item><item><title>Checkpoint</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter4/checkpoint/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter4/checkpoint/</guid><description>In this chapter, we learned about how a markdown compiler works, and we started working more closely with strings and string slices while piecing together functionality with conditional logic.
Next, we&amp;rsquo;ll implement our Markdown compiler logic and open a file, read it line-by-line, translate it into HTML, and write the HTML to a new file.
It&amp;rsquo;s going to be fun!
ðŸš€ Fourth Checkpoint Reached! ðŸš€ "If you can&amp;#39;t fly, then run, if you canâ€™t run then walk, if you canâ€™t walk then crawl, but whatever you do you have to keep moving forward.</description></item></channel></rss>