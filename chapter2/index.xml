<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2: Variables &amp; functions on Getting Started with Programming in Rust</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter2/</link><description>Recent content in 2: Variables &amp; functions on Getting Started with Programming in Rust</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 28 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jesselawson.github.io/getting-started-with-rust/chapter2/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a function in Rust</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter2/create-function/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter2/create-function/</guid><description>The first thing we are going to write in Rust is a function.
A function is defined with the fn keyword, like this:
1 2 3 fn main() { println!(&amp;#34;Hello, world!&amp;#34;); } Above our main() function, let&amp;rsquo;s create a new function called usage(). Inside it, we&amp;rsquo;ll use the same macro used to write &amp;quot;Hello, world!&amp;quot; to output the name and a short description of our tool:
1 2 3 4 5 6 7 fn usage() { println!</description></item><item><title>Return a value from a function</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter2/return-value-from-function/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter2/return-value-from-function/</guid><description>In this section, we&amp;rsquo;re going to create a function called get_version() that will return some arbitrary version number of our tool.
We saw earlier that a function with no arguments and no return value is written like this:
1 2 fn get_version() { } When we want a function to return a value, we append -&amp;gt; and the return value&amp;rsquo;s type to the declaration, like this:
1 2 fn get_version() -&amp;gt; u16 { } Let&amp;rsquo;s say our version number is 1000, and we want to return that from a function and then print it out.</description></item><item><title>Create an integer variable</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter2/integer-variable/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter2/integer-variable/</guid><description>The first kind of variable we will learn about is the integer. All variables in Rust are declared by putting their type after their name. For example, if we want to create an integer variable to hold the version of our application, we would declare a variable version like this:
1 2 let version: u16; // I&amp;#39;m using u16 for the sake of example only. This could be // a u8, too.</description></item><item><title>Chapter 2 Checkpoint</title><link>https://jesselawson.github.io/getting-started-with-rust/chapter2/checkpoint/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://jesselawson.github.io/getting-started-with-rust/chapter2/checkpoint/</guid><description>In this chapter, we learned about functions and integer variables. Next, we&amp;rsquo;ll start diving into how Rust thinks about memory as we create both dynamic and static strings to hold different kinds of information.
ðŸš€ Second Checkpoint Reached! ðŸš€ "Success is stumbling from failure to failure with no loss of enthusiasm." &amp;mdash;Winston Churchill Before continuing, you should be able to confidently:
Create a function without errors Create an integer variable without errors Print an integer variable to the command line without errors All our code up to this point is available here on GitHub.</description></item></channel></rss>